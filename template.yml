AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: API Gateway connected to a Lambda function

Resources:
  RouterLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/lambda/
      Handler: app.lambda_handler
      Runtime: python3.12
      Timeout: 30
      Events:
        EventAPI:
          Type: Api
          Properties:
            RestApiId:
              Ref: FEApi
            Path: /{proxy+}
            Method: ANY
      Environment:
        Variables:
          EMAIL_SENDER: ${env:EMAIL_SENDER}
          SMTP_HOST: ${env:SMTP_HOST}
          SMTP_PORT: ${env:SMTP_PORT}
          SMTP_USERNAME: ${env:SMTP_USERNAME}
          SMTP_PASSWORD: ${env:SMTP_PASSWORD}
          SUPABASE_URL: ${env:SUPABASE_URL}
          SUPABASE_KEY: ${env:SUPABASE_KEY}
          ENCRYPTION_KEY: ${env:ENCRYPTION_KEY}
  FEApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody:
        openapi: 3.0.0
        info:
          title: Frontend API
          version: 1.0.0
        paths:

          /profile:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            options:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

          /profile/{profileId}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            patch:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            options:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

          /student-team:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            options:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
          
          /student-team/{studentTeamId}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            patch:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            options:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

          /student-team/{studentTeamId}/members:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            options:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

          /student-team/{studentTeamId}/members/{profileId}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            patch:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            options:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

          /recruitment-round:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            options:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

          /student-team/{studentTeamId}/recruitment-round:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            options:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

          /recruitment-round/{roundId}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            patch:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            options:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

          /opening:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            options:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

          /recruitment-round/{roundId}/opening:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            options:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

          /opening/{openingId}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            patch:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            options:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

          /opening/{openingId}/team-lead-assign:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            options:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
          
          /opening/{openingId}/team-lead-assign/{profileId}:
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            options:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

          /application:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            options:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

          /opening/{openingId}/application:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            options:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

          /application/{applicationId}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            patch:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            options:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

          /send-interview-emails/{openingId}:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            options:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
          
          /decrypt/{id}:
            get:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            options:
              x-amazon-apigateway-integration:
                httpMethod: POST
                payloadFormatVersion: "2.0"
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

            
Outputs:
  ApiUrl:
    Description: API endpoint URL for Prod environment
    Value: !Sub "https://${FEApi}.execute-api.${AWS::Region}.amazonaws.com/prod"